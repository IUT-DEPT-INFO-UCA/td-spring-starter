package org.uca.iut.info.s3atdspring.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.uca.iut.info.s3atdspring.model.entity.UserEntity;
import org.uca.iut.info.s3atdspring.model.repository.UserRepository;
import org.uca.iut.info.s3atdspring.service.UserService;
import org.uca.iut.info.s3atdspring.service.data.UserDto;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Override
    public List<UserEntity> getUsers() {


        return userRepository.findAll();
    }

    @Override
    public UserEntity getUserById(Long userId) {

        if (userId == null) {

            // exception could be specific for our project (extends Exception class)
            throw new IllegalArgumentException("no id provided");
        }

        final Optional<UserEntity> user = userRepository.findById(userId);

        // we can throw an exception if no user is found for the given Id
        return user.isPresent() ? user.get() : null;
    }

    @Override
    public List<UserEntity> getUsersByLastNameAndFirstName(String lastName, String firstName) {

        if (lastName == null || firstName == null) {

            // exception could be specific for our project (extends Exception class)
            throw new IllegalArgumentException("missing param/s");
        }

        final List<UserEntity> items = userRepository.findAll();
        items.size();

        return userRepository.findByLastnameAndFirstname(lastName, firstName);
    }

    @Override
    public UserEntity createUser(UserDto userDto) {

        if (userDto == null || userDto.getLastname() == null || userDto.getLastname().isEmpty()) {

            throw new IllegalArgumentException("missing param/s");
            // return null;
        }

        final UserEntity newUser = new UserEntity();
        newUser.setLastname(userDto.getLastname());
        newUser.setFirstname(userDto.getFirstname());

        // Id will be automatically generated by our save (as specified in our 'id' property)

        return userRepository.save(newUser);
    }

    @Override
    public boolean updateUser(Long userId, UserDto userDto) {

        final UserEntity user = getUserById(userId);

        if (user != null) {
            user.setLastname(userDto.getLastname());
            user.setFirstname(userDto.getFirstname());

            userRepository.save(user);

            return true;
        }

        return false;
    }

    @Override
    public void deleteUser(Long userId) {

        // we could check the param validity
        userRepository.deleteById(userId);

    }
}